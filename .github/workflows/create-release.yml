# see https://github.com/kencochrane/golang-github-action-sign-macos/blob/master/.github/workflows/release.yml

on:
  workflow_dispatch:

jobs:
  build-sign-notarize-release:
    name: build, sign, and notarize apps using cmake/Xcode for macOS 10.15, then create release
    runs-on: macOS-latest
    steps:
      - name: Install xcnotary
        run: brew install akeru-inc/tap/xcnotary
      - uses: Apple-Actions/import-codesign-certs@v1
      - name: Import Code-Signing Certificates
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      - uses: actions/checkout@v2
      - name: generate build system
        run: cmake -S . -B build -G Xcode -DCMAKE_OSX_ARCHITECTURES=x86_64;arm64 -DAV_SPEECH_IN_NOISE_MACOS_OTHER_CODE_SIGN_FLAGS:STRING=--timestamp --options=runtime -DAV_SPEECH_IN_NOISE_MACOS_CODE_SIGN_IDENTITY:STRING=${{ secrets.CODE_SIGN_IDENTITY }} -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
      - name: build app -- Release
        run: cmake --build build --target av-speech-in-noise-bundle --config Release
      - name: build facemask study -- Release
        run: cmake --build build --target av-speech-in-noise-facemask-study --config Release
      - name: notarize apps
        run: |
          xcrun altool --store-password-in-keychain-item "AC_PASSWORD"
               -u "${{ secrets.APP_CONNECT_NOTARIZATION_USERNAME }}"
               -p ${{ secrets.APP_CONNECT_NOTARIZATION_PASSWORD }}
          xcnotary notarize build/macos/Release/AV Speech in Noise.app --developer-account ${{ secrets.APP_CONNECT_NOTARIZATION_USERNAME }}--developer-password-keychain-item AC_PASSWORD
          xcnotary notarize build/macos/Release/Facemask Study.app --developer-account ${{ secrets.APP_CONNECT_NOTARIZATION_USERNAME }}--developer-password-keychain-item AC_PASSWORD
